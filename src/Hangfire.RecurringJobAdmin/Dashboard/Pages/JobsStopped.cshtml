@using Hangfire
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Dashboard.Resources
@using Hangfire.RecurringJobAdmin.Core
@using Hangfire.RecurringJobAdmin.Dashboard.Content.resx
@using Hangfire.RecurringJobAdmin.Models
@using Hangfire.RecurringJobAdmin.Pages
@using Hangfire.Storage
@inherits PageBase
@{
    Layout = new LayoutPage(Strings.DeletedJobsPage_Title);

    int from, perPage;

    int.TryParse(Query("from"), out from);
    int.TryParse(Query("count"), out perPage);

    List<RecurringJobDto> jobs;
    using (var connection = Storage.GetReadOnlyConnection())
    {
        jobs = JobAgent.GetStoppedRecurringJobs(connection).Skip(from).Take(perPage).ToList();
    }
    var pager = new Pager(from, perPage, DashboardOptions.DefaultRecordsPerPage, jobs.Count);
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 id="page-title" class="page-header">@RecurringJobAdminStrings.StoppedJobsPage_Title</h1>

        @if (pager.TotalPageCount == 0)
        {
            <div class="alert alert-info">
                @RecurringJobAdminStrings.StoppedJobsPage_NoJobs
            </div>
        }
        else
        {
            <div class="js-jobs-list">
                <div class="btn-toolbar btn-toolbar-top">
                    @Html.PerPageSelector(pager)
                </div>
                <div class="table-responsive">
                    <table class="table" aria-describedby="page-title">
                        <thead>
                            <tr>
                                <th class="min-width">@Strings.Common_Id</th>
                                <th>@Strings.QueuesPage_Table_Queue</th>
                                <th>@Strings.Common_Job</th>
                                <th>@RecurringJobAdminStrings.Common_Method</th>
                                <th>@Strings.RecurringJobsPage_Table_TimeZone</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var job in jobs)
                            {
                                <tr class="hover">
                                    <td class="min-width">@job.Id</td>
                                    <td class="word-break">@job.Queue</td>
                                    <td class="word-break width-30">
                                        @if (job.Job != null)
                                        {
                                            @: @Html.JobName(job.Job)
                                        }
                                        else if (job.LoadException != null && job.LoadException.InnerException != null)
                                        {
                                            <em>@job.LoadException.InnerException.Message</em>
                                        }
                                        else if (job.LoadException != null)
                                        {
                                            <em>@job.LoadException.Message</em>
                                        }
                                        else
                                        {
                                            <em>@Strings.Common_NotAvailable</em>
                                        }
                                    </td>
                                    <td class="word-break">
                                        @if (job.Job != null)
                                        {
                                            @job.Job.Method?.Name
                                        }
                                        else if (job.LoadException != null && job.LoadException.InnerException != null)
                                        {
                                            <em>@job.LoadException.InnerException.Message</em>
                                        }
                                        else if (job.LoadException != null)
                                        {
                                            <em>@job.LoadException.Message</em>
                                        }
                                        else
                                        {
                                            <em>@Strings.Common_NotAvailable</em>
                                        }
                                    </td>
                                    <td>
                                        @if (!String.IsNullOrWhiteSpace(job.TimeZoneId))
                                        {
                                            string displayName;
                                            Exception exception = null;

                                            try
                                            {
                                                var resolver = DashboardOptions.TimeZoneResolver ?? new DefaultTimeZoneResolver();
                                                displayName = resolver.GetTimeZoneById(job.TimeZoneId).DisplayName;
                                            }
                                            catch (Exception ex) when (ex.IsCatchableExceptionType())
                                            {
                                                displayName = null;
                                                exception = ex;
                                            }

                                            <span title="@displayName" data-container="body">
                                                @job.TimeZoneId
                                                @if (exception != null)
                                                {
                                                    <span class="glyphicon glyphicon-exclamation-sign" title="@exception.Message"></span>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            @: UTC
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @Html.Paginator(pager)
            </div>
        }
    </div>
</div>
